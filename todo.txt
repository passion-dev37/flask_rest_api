1. use postgres for db
2. games, tags, categories (genres), platforms, ratings, creators
3. 206 code for partial content, aka pagination
4. Response class for api
5. productschema of marshmellow for data serialization
6. token based authentication
7. rate limiting (use redis), althought it could be done with nginx config
8. login_required for protecting resources 
9. 429 err code for too many requests
10. what is 400 for. POST /api/moives/<id> ans:bad request
11. authentication with google
12. finally test the api

blueprint, sqlalchemy, flask_restful, api, resources, itsdangerous, OAuth2.0, marshmellow

GET     /api/movies/        returns 200 # list all movies
POST    /api/movies/        returns 201 # create a movie
GET     /api/movies/<id>    returns 200 # show a specific movie
PUT     /api/movies/<id>    returns 201 # update a movie
DELETE  /api/movies/<id>    returns 204 # delete a movie

/profiles/{profileName}
/messages/{messageId}

/games/{game_id}/platforms
/creators/{creator_id}/games
/categories/{category_id}/games
